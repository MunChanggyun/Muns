{"version":3,"sources":["Auth/AuthForm.js","lib/Palette.js","Auth/AuthTamplate.js","Pages/AuthPage.js","App.js","serviceWorker.js","index.js"],"names":["AuthForm","palette","cyan","green","orange","blue","red","AuthTampleateBlock","styled","div","AuthTampleateBottomBlock","WhiteBox","AuthTampleate","AuthPage","AuthTamplate","App","component","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNAUeA,EARE,WACb,OACI,uC,cC8DOC,EAhEC,CACZC,KAAM,CACF,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEJC,MAAO,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEJC,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEJC,KAAM,CACF,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEJC,IAAK,CACD,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,Y,w2BCzDR,IAAMC,EAAqBC,IAAOC,IAAV,IACAR,EAAQC,KAAK,IAU/BQ,EAA2BF,IAAOC,IAAV,IAKZR,EAAQC,KAAK,IAKxBS,EAAWH,IAAOC,IAAV,KAyCAG,EAbO,WAClB,OACI,oCACI,kBAACL,EAAD,KACI,kBAACI,EAAD,OAGJ,kBAACD,EAAD,QChDGG,EARE,WACb,OACI,kBAACC,EAAD,KACI,kBAAC,EAAD,QCGGC,MANf,WACE,OACE,kBAAC,IAAD,CAAOC,UAAWH,EAAUI,KAAK,OCMjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7957d233.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AuthForm = () => {\r\n    return (\r\n        <div>\r\n            login\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AuthForm;","// https://yeun.github.io/open-color/ 색상 참고 사이트\r\n\r\nconst palette = {\r\n    cyan: [\r\n        \"#e3fafc\",\r\n        \"#c5f6fa\",\r\n        \"#99e9f2\",\r\n        \"#66d9e8\",\r\n        \"#3bc9db\",\r\n        \"#22b8cf\",\r\n        \"#15aabf\",\r\n        \"#1098ad\",\r\n        \"#0c8599\",\r\n        \"#0b7285\"\r\n    ],\r\n    green: [\r\n        \"#ebfbee\",\r\n        \"#d3f9d8\",\r\n        \"#b2f2bb\",\r\n        \"#8ce99a\",\r\n        \"#69db7c\",\r\n        \"#51cf66\",\r\n        \"#40c057\",\r\n        \"#37b24d\",\r\n        \"#2f9e44\",\r\n        \"#2b8a3e\"\r\n    ],\r\n    orange: [\r\n        \"#fff4e6\",\r\n        \"#ffe8cc\",\r\n        \"#ffd8a8\",\r\n        \"#ffc078\",\r\n        \"#ffa94d\",\r\n        \"#ff922b\",\r\n        \"#fd7e14\",\r\n        \"#f76707\",\r\n        \"#e8590c\",\r\n        \"#d9480f\"   \r\n    ],\r\n    blue: [\r\n        \"#e7f5ff\",\r\n        \"#d0ebff\",\r\n        \"#a5d8ff\",\r\n        \"#74c0fc\",\r\n        \"#4dabf7\",\r\n        \"#339af0\",\r\n        \"#228be6\",\r\n        \"#1c7ed6\",\r\n        \"#1971c2\",\r\n        \"#1864ab\"   \r\n    ],\r\n    red: [\r\n        \"#fff5f5\",\r\n        \"#ffe3e3\",\r\n        \"#ffc9c9\",\r\n        \"#ffa8a8\",\r\n        \"#ff8787\",\r\n        \"#ff6b6b\",\r\n        \"#fa5252\",\r\n        \"#f03e3e\",\r\n        \"#e03131\",\r\n        \"#c92a2a\"   \r\n    ]\r\n    \r\n}\r\n\r\nexport default palette;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport palette from '../lib/Palette';\r\n\r\nconst AuthTampleateBlock = styled.div`\r\n    background-color: ${palette.cyan[7]};\r\n    min-height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: calc(10px + 2vmin);\r\n    color: white;\r\n`;\r\n\r\nconst AuthTampleateBottomBlock = styled.div` \r\n    position: fixed;\r\n    top: 50vh;\r\n    height: 50vh;\r\n    width: 100%;\r\n    background: ${palette.cyan[3]};\r\n    border-radius: 2px;\r\n`;\r\n\r\n // 내부 영역\r\n const WhiteBox = styled.div`\r\n    .logo-area {\r\n        display: block;\r\n        padding-bottom: 2rem;\r\n        text-align: center;\r\n        font-weight: bold;\r\n        letter-spacing: 2px;\r\n    }\r\n    z-index: 9999;\r\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n    padding: 2rem;\r\n    width: 360px;\r\n    background: white;\r\n    border-radius: 2px;\r\n `\r\n\r\n// position: absolute;\r\n//     left:0;\r\n//     top:0;\r\n//     bottom:0;\r\n//     right:0;\r\n//     background: ${palette.cyan[2]};\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     justify-content: center;\r\n//     align-items: center;\r\n\r\n\r\nconst AuthTampleate = () => {\r\n    return (\r\n        <>\r\n            <AuthTampleateBlock >\r\n                <WhiteBox />\r\n                \r\n            </AuthTampleateBlock>\r\n            <AuthTampleateBottomBlock />\r\n            \r\n        </>\r\n    );\r\n};\r\n\r\nexport default AuthTampleate;","import React from 'react';\r\nimport AuthForm from '../Auth/AuthForm';\r\nimport AuthTamplate from '../Auth/AuthTamplate';\r\n\r\nconst AuthPage = () => {\r\n    return (\r\n        <AuthTamplate>\r\n            <AuthForm />\r\n        </AuthTamplate>\r\n    );\r\n}\r\n\r\nexport default AuthPage;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport AuthPage from './Pages/AuthPage';\n\nfunction App() {\n  return (\n    <Route component={AuthPage} path=\"/\" />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}